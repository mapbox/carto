---
layout: docs
categories: api
version: <%= version %>
---

<div class='col3'>
  <div class='doc-nav'>
    <form class='doc-search contain pad2'>
      <input class='stretch' type='text' placeholder='Filter'>
      <span class='icon search'></span>
    </form>
    <nav class='v small'>
      <a class='pad1y2x' href='#map-elements'><strong>Map Elements</strong></a>
      <%= toc({symbolizers:symbolizers, _:_}) %>
      <a class='pad1y2x' href='#values'><strong>Values</strong></a>
      <a class='pad1y2x' href='#color'><strong>Color</strong></a>
      <a class='pad1y2x' href='#float'><strong>Float</strong></a>
      <a class='pad1y2x' href='#uri'><strong>URI</strong></a>
      <a class='pad1y2x' href='#string'><strong>String</strong></a>
      <a class='pad1y2x' href='#boolean'><strong>Boolean</strong></a>
      <a class='pad1y2x' href='#expressions'><strong>Expressions</strong></a>
      <a class='pad1y2x' href='#numbers'><strong>Numbers</strong></a>
      <a class='pad1y2x' href='#functions'><strong>Functions</strong></a>
    </nav>
  </div>
</div>

<div class='col9 keyline-left prose'>
  {% if site.version != page.version %}
  {% if page.version != 'latest' %}
  <div class='doc-content doc pad4 warn'>
    Viewing an older version of {{site.title}}. Check out <a href='{{site.baseurl}}/api/{{site.version}}'>{{site.version}} for the latest</a>.
  </div>
  {% endif %}
  {% endif %}
  <div id='docs' class='doc-content prose'>
    <div class='doc pad4'>
      <h1 id='map-elements'>Map elements</h1>
      <p>The following is a list of properties provided in CartoCSS that you can apply to map elements.</p>
      <%= table({symbolizers:symbolizers, _:_}) %>

      <h1 id='values'>Values</h1>
      <p>Below is a list of values and an explanation of any expression that can be applied to properties in CartCSS.</p>

      <h3 id='color'>Color</h3>
      <div id='content-color' class='depth-0'>
<p>CartoCSS accepts a variety of syntaxes for colors - HTML-style hex values,
rgb, rgba, and hsl. It also supports the predefined HTML colors names, like
<code>yellow</code> and <code>blue</code>.</p>

{% highlight css %}
#line {
  line-color: #ff0;
  line-color: #ffff00;
  line-color: rgb(255, 255, 0);
  line-color: rgba(255, 255, 0, 1);
  line-color: hsl(100, 50%, 50%);
  line-color: yellow;
}
{% endhighlight %}
<p>Especially of note is the support for hsl, which can be
<a href='http://mothereffinghsl.com/'>easier to reason about than rgb()</a>
<p>Carto also includes several color functions <a href='http://lesscss.org/#-color-functions'>borrowed from less</a>:</p>

{% highlight css %}
// lighten and darken colors
lighten(#ace, 10%);
darken(#ace, 10%);

// saturate and desaturate
saturate(#550000, 10%);
desaturate(#00ff00, 10%);

// increase or decrease the opacity of a color
fadein(#fafafa, 10%);
fadeout(#fefefe, 14%);

// spin rotates a color around the color wheel by degrees
spin(#ff00ff, 10);

// mix generates a color in between two other colors.
mix(#fff, #000, 50%);
{% endhighlight %}

<p>These functions all take arguments which can be color variables, literal colors,
or the results of other functions operating on colors.</p>

</div>

<h3 id='float'>Float</h3>
<div id='content-float' class='depth-0'>
<p>Float is a fancy way of saying 'number'. In CartoCSS, you specify <em>just a number</em> -
unlike CSS, there are no units, but everything is specified in pixels.</p>
{% highlight css %}
#line {
  line-width: 2;
}
{% endhighlight %}

<p>It's also possible to do simple math with number values:</p>

{% highlight css %}
#line {
  line-width: 4 / 2; // division
  line-width: 4 + 2; // addition
  line-width: 4 - 2; // subtraction
  line-width: 4 * 2; // multiplication
  line-width: 4 % 2; // modulus
}
{% endhighlight %}

</div>

<h3 id='uri'>URI</h3>
<div id='content-uri' class='depth-0'>
<p>URI is a fancy way of saying URL. When an argument is a URI, you use the same kind of
<code>url('place.png')</code> notation that you would with HTML. Quotes around the URL
aren't required, but are highly recommended.</p>
<p>URIs can be paths to places on your computer, or on the internet.</p>
{% highlight css %}
#markers {
  marker-file: url('marker.png');
}
{% endhighlight %}
</div>

<h3 id='string'>String</h3>
<div id='content-string' class='depth-0'>
<p>A string is basically just text. In the case of CartoCSS, you're going to put it in quotes. Strings
can be anything, though pay attention to the cases of <code>text-name</code> and <code>shield-name</code> -
they actually will refer to features, which you refer to by putting them in brackets, as seen
in the example below.</p>
{% highlight html %}
#labels {
  text-name: "[MY_FIELD]";
}
{% endhighlight %}
</div>

<h3 id='boolean'>Boolean</h3>
<div id='content-boolean' class='depth-0'>
<p>Boolean means yes or no, so it accepts the values <code>true</code> or <code>false</code>.</p>
{% highlight css %}
#markers {
  marker-allow-overlap:true;
}
{% endhighlight %}
</div>

<h3 id='expressions'>Expressions</h3>
<div id='content-expression' class='depth-0'>
<p>Expressions are statements that can include fields, numbers, and other
types in a really flexible way. You have run into expressions before,
in the realm of 'fields', where you'd specify <code>"[FIELD]"</code>,
but expressions allow you to drop the quotes and also do quick addition,
division, multiplication, and concatenation from within Carto syntax.</p>
{% highlight css %}
#buildings {
  building-height: [HEIGHT_FIELD] * 10;
}
{% endhighlight %}
</div>

<h3 id='numbers'>Numbers</h3>
<div id='content-numbers' class='depth-0'>
<p>Numbers are comma-separated lists of one or more number in a specific
order. They're used in line dash arrays, in which the numbers specify
intervals of line, break, and line again.</p>
{% highlight css %}
#disputedboundary {
  line-dasharray: 1, 4, 2;
}
{% endhighlight %}
</div>

<h3 id='percentages'>Percentages</h3>
<div id='content-float' class='depth-0'>
    <p>In Carto, the percentage symbol, <code>%</code> universally means
    <code>value/100</code>. It's meant to be used with ratio-related properties,
    like opacity rules. <strong>You should not use percentages as widths,
    heights, or other properties - unlike CSS, percentages are not
    relative to cascaded classes or page size, they're, as stated,
    simply the value divided by one hundred.</strong>
{% highlight css %}
#world {
  // this syntax
  polygon-opacity: 50%;

  // is equivalent to
  polygon-opacity: 0.5;
}
{% endhighlight %}
</div>

<h3 id='functions'>Functions</h3>
<div id='content-functions' class='depth-0'>
<p>Functions are comma-separated lists of one or more functions. For
instance, transforms use the <code>functions</code> type to allow
for transforms within Carto, which are optionally chainable.</p>

{% highlight css %}
#point {
  point-transform: scale(2, 2);
}
{% endhighlight %}
</div>
</div>

    <div class='keyline-top center small'>
      <div class='pad2'>
      The code and documentation to <a href='http://github.com/mapbox/carto'>CartoCSS is hosted on GitHub</a> where you can contribute changes and improvements.
      </div>
    </div>
  </div>
</div>
