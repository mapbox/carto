#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var util = require('util');
var carto = require('carto');

var url = require('url');
var _ = require('underscore');
var existsSync = require('fs').existsSync || require('path').existsSync

var args = process.argv.slice(1);
var options = { nosymlink:false };

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            util.puts("carto " + carto.version.join('.') + " (Carto map stylesheet compiler)");
            process.exit(0);
            break;
        case 'b':
        case 'benchmark':
            options.benchmark = true;
            break;
        case 'n':
        case 'nosymlink':
            options.nosymlink = true;
            break;
        default:
            util.puts("Usage: carto <source MML file>");
            util.puts("Options:");
            util.puts("  -v   --version      Parse JSON map manifest");
            util.puts("  -b   --benchmark    Outputs total compile time");
            util.puts("  -n   --nosymlink    Use absolute paths instead of symlinking files");
            process.exit(0);
            break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = path.join(process.cwd(), input);
}

if (!input) {
    util.puts("carto: no input files");
    process.exit(1);
}

if (options.benchmark) {
    var start = +new Date;
}

var ext = path.extname(input);

if (!ext) {
    util.puts("carto: please pass either a .mml file or .mss file");
    process.exit(1);
}

if (!existsSync(input)) {
    util.puts("carto: file does not exist: '" + input + "'");
    process.exit(1);
}

function compile(err, data) {
    if (err) throw err;
    try {
        new carto.Renderer({
            filename: input,
            benchmark: options.benchmark
        }).render(data, function(err, output) {
            if (err) {
                console.log(err);
                throw err;
                process.exit(1);
            } else {
                if (!options.benchmark) {
                    util.puts(output);
                } else {
                    var duration = (+new Date) - start;
                    console.log('TOTAL: ' + (duration) + 'ms');
                }
            }
        });
    } catch (e) {
        if (e.stack) {
            util.error(e.stack);
        } else {
            util.error(e);
        }
    }
};

try {
    var data = fs.readFileSync(input, 'utf-8');
} catch(err) {
    util.puts("carto: " + err.message.replace(/^[A-Z]+, /, ''));
    process.exit(1);
}

if (ext == '.mml') {
    try {
        data = JSON.parse(data);
    } catch(err) {
        util.puts("carto: " + err.message.replace(/^[A-Z]+, /, ''));
        process.exit(1);
    }

    var millstone = undefined;
    try {
        require.resolve('millstone');
        millstone = require('millstone');
    } catch (err) {
        util.puts('carto: Millstone not found. ' + err.message.replace(/^[A-Z]+, /, ''));
        process.exit(1);
    }
    millstone.resolve({
        mml: data,
        base: path.dirname(input),
        cache: path.join(path.dirname(input), 'cache'),
       nosymlink: options.nosymlink
    }, compile);
} else if (ext == '.mss') {
    var env = _({}).defaults({
        benchmark: false,
        validation_data: false,
        effects: []
    });
    var output = [];
    var parser = (carto.Parser(env)).parse(data);
    var rules = parser.toList(env);
    var inherited = carto.inheritRules(rules,env);
    var sorted = carto.sortStyles(inherited,env);
        _(sorted).each(function(rule) {
            var style = new carto.tree.Style('layer', rule.attachment, rule);
            if (style) {
                // env.effects can be modified by this call
                output.push(style.toXML(env));
            }
        });
    console.log(output.join('\n'));
} else {
    util.puts("carto: please pass either a .mml file or .mss file");
}
