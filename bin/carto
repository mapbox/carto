#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('sys'),
    carto = require('carto');

var args = process.argv.slice(1);
var options = { nosymlink:false };

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            sys.puts("carto " + carto.version.join('.') + " (Carto map stylesheet compiler)");
            process.exit(0);
            break;
        case 'b':
        case 'benchmark':
            options.benchmark = true;
            break;
        case 'n':
        case 'nosymlink':
            options.nosymlink = true;
            break;

        default:
            sys.puts("Usage: carto <source MML file>");
            sys.puts("Options:");
            sys.puts("  -v   --version      Parse JSON map manifest");
            sys.puts("  -b   --benchmark    Outputs total compile time");
            sys.puts("  -n   --nosymlink    Use absolute paths instead of symlinking files");
            process.exit(0);
            break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = path.join(process.cwd(), input);
}

if (!input) {
    sys.puts("carto: no input files");
    process.exit(1);
}

if (options.benchmark) {
    var start = +new Date;
}

try {
    var data = fs.readFileSync(input, 'utf-8');
} catch(err) {
    sys.puts("carto: " + err.message.replace(/^[A-Z]+, /, ''));
    process.exit(1);
}

try {
    data = JSON.parse(data);
} catch(err) {
    sys.puts("carto: " + err.message.replace(/^[A-Z]+, /, ''));
    process.exit(1);
}

var millstone = undefined;

try {
    require.resolve('millstone');
    millstone = require('millstone');
} catch (err) {
    sys.puts('carto: Millstone not found. ' + err.message.replace(/^[A-Z]+, /, ''));
    process.exit(1);
}

millstone.resolve({
    mml: data,
    base: path.dirname(input),
    cache: path.join(path.dirname(input), 'cache'),
   nosymlink: options.nosymlink
}, compile);

function compile(err, data) {
    if (err) throw err;
    try {
        new carto.Renderer({
            filename: input,
            benchmark: options.benchmark
        }).render(data, function(err, output) {
            if (err) {
                console.log(err);
                throw err;
                process.exit(1);
            } else {
                if (!options.benchmark) {
                    sys.puts(output);
                } else {
                    var duration = (+new Date) - start;
                    console.log('TOTAL: ' + (duration) + 'ms');
                }
            }
        });
    } catch (e) {
        if (e.stack) {
            sys.error(e.stack);
        } else {
            sys.error(e);
        }
    }
};
